#!/usr/bin/env node
'use strict';

var program   = require ('commander')
  , winston   = require ('winston')
  , prompt    = require ('prompt')
  , blueprint = require ('@onehilltech/blueprint')
  , path      = require ('path')
  , jsonfile  = require ('jsonfile')
  ;

blueprint.Application (path.resolve (process.cwd (), 'app'))
  ;

var gatekeeper = require ('../lib')
  ;

/**
 * Run the main program.
 *
 * @param err
 * @param client
 */
function runProgram (err, client) {
  if (err) throw err;

  function addAccount () {
    var schema = {
      properties: {
        username: {
          required: true,
          type: 'string'
        },
        password: {
          required: true,
          hidden: true,
          type: 'string'
        },
        email: {
          required: true,
          type: 'string'
        },
        roles: {}
      }
    };

    // Prompt the user for the account information.

    prompt.start ();

    prompt.get (schema, function (err, result) {
      client.createAccount (result, function (err, result) {
        process.exit (0);
      });
    });
  }

  function removeAccount (accountId) {
    Account.remove ({_id : accountId}, function (err) {
      if (err) throw err;
      process.exit (0);
    });
  }

  function enableAccount (accountId, state) {
    state = JSON.parse (state.toLowerCase());

    Account.findByIdAndUpdate (accountId, {enabled: state}, function (err) {
      if (err) throw err;
      process.exit (0);
    });
  }

  // command: create
  program
    .command ('add')
    .description ('add a new account')
    .action (addAccount);

  // command: remove
  program
    .command ('remove <accountId>')
    .description ('remove an exist account')
    .action (removeAccount);

  // command: enable
  program
    .command ('enable <accountId> <state>')
    .description ('enable/disable access for an existing account')
    .action (enableAccount);

  program.parse (process.argv);
}


// Load the client information.
var dataFile = path.resolve (process.cwd (), 'data/gatekeeper-cli.data');

jsonfile.readFile (dataFile, function (err, obj) {
  if (err) throw err;

  var opts = {
    baseUri : 'http://localhost:5000',
    clientId : obj.client_id,
    clientSecret : obj.client_secret
  };

  gatekeeper.newClient (opts, runProgram);
});

