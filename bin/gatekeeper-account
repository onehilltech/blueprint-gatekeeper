#!/usr/bin/env node
'use strict';

var program   = require ('commander')
  , winston   = require ('winston')
  , prompt    = require ('prompt')
  , blueprint = require ('@onehilltech/blueprint')
  , path      = require ('path')
  , jsonfile  = require ('jsonfile')
  ;

blueprint.Application (path.resolve (process.cwd (), 'app'))
  ;

var gatekeeper = require ('../lib')
  ;

/**
 * Get a new GatekeeperClient object.
 *
 * @param callback
 */
function getGatekeeperClient (callback) {
  // Load the client information.
  var dataFile = path.resolve (process.cwd (), 'data/gatekeeper-cli');

  jsonfile.readFile (dataFile, function (err, obj) {
    if (err) throw err;

    var baseurl = program.baseurl || 'http://localhost:5000';

    var opts = {
      baseUri : baseurl,
      clientId : obj.client_id,
      clientSecret : obj.client_secret
    };

    gatekeeper.newClient (opts, callback);
  });
}

function addAccount () {
  var schema = {
    properties: {
      username: {
        required: true,
        type: 'string'
      },
      password: {
        required: true,
        hidden: true,
        type: 'string'
      },
      email: {
        required: true,
        type: 'string'
      },
      roles: {}
    }
  };

  // Prompt the user for the account information.

  prompt.start ();

  prompt.get (schema, function (err, result) {
    getGatekeeperClient (function (err, client) {
      if (err) throw err;

      client.createAccount (result, function (err, result) {
        if (err) throw err;
        process.exit (0);
      });
    });
  });
}

/*
function removeAccount (accountId) {
  Account.remove ({_id : accountId}, function (err) {
    if (err) throw err;
    process.exit (0);
  });
}

function enableAccount (accountId, state) {
  state = JSON.parse (state.toLowerCase());

  Account.findByIdAndUpdate (accountId, {enabled: state}, function (err) {
    if (err) throw err;
    process.exit (0);
  });
}
*/

program.option ('--baseurl <url>', 'base url of Gatekeeper service');

// command: create
program
  .command ('add')
  .description ('add a new account')
  .action (addAccount);

/*
// command: remove
program
  .command ('remove <accountId>')
  .description ('remove an exist account')
  .action (removeAccount);

// command: enable
program
  .command ('enable <accountId> <state>')
  .description ('enable/disable access for an existing account')
  .action (enableAccount);
*/

program.parse (process.argv);
