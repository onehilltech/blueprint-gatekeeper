#!/usr/bin/env node
'use strict';

var winston   = require ('winston')
  , prompt    = require ('prompt')
  , blueprint = require ('@onehilltech/blueprint')
  , path      = require ('path')
  , async     = require ('async')
  , fse       = require ('fs-extra')
  , scope     = require ('../lib').scope
  ;

var appPath = path.resolve (process.cwd (), 'app');
var rcPath  = path.resolve (process.cwd (), '.gatekeeper');

const DEFAULT_SCOPE = [scope.superuser];

async.waterfall ([
  function (callback) { prompt.get (['email'], callback); },
  execute
], setupComplete);

function execute (args, callback) {
  async.waterfall ([
    function (callback) {
      blueprint.Application (appPath, callback);
    },

    function (app, callback) {
      app.start (callback);
    },

    function (app, callback) {
      fse.ensureDir (rcPath, function (err) {
        return callback (err, app);
      });
    },

    function (exists, callback) {
      var data = [
        {name: 'gatekeeper-cli', email: args.email, scope: DEFAULT_SCOPE},
        {name: 'gatekeeper-webportal', email: args.email, scope: DEFAULT_SCOPE}
      ];

      blueprint.app.models.Client.create (data, callback);
    },

    function (clients, callback) {
      async.each (clients, function (client, callback) {
        var data = {
          client_id: client.id,
          client_secret: client.secret
        };

        var filename = path.resolve (rcPath, client.name);
        fse.writeJSON (filename, data, {spaces: 2}, callback);
      }, callback);
    }], callback);
}

function setupComplete (err) {
  if (err) throw err;

  winston.log ('info', 'setup complete!');
  process.exit (0);
}
