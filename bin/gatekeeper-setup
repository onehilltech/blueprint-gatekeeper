#!/usr/bin/env node

const winston = require ('winston');
const prompt  = require ('prompt');
const blueprint = require ('@onehilltech/blueprint');
const mongodb = require ('@onehilltech/blueprint-mongodb');
const path = require ('path');
const async = require ('async');
const fse = require ('fs-extra');

const appPath = path.resolve (process.cwd (), 'app');
const rcPath  = path.resolve (process.cwd (), '.gatekeeper');
const DEFAULT_SCOPE = ['gatekeeper.*'];

let targetConnection = '$default';

async.waterfall ([
  function (callback) { prompt.get (['email'], callback); },
  execute
], setupComplete);

function execute (args, callback) {
  async.waterfall ([
    function (callback) {
      blueprint.createApplication (appPath, callback);
    },

    function (app, callback) {
      async.waterfall ([
        /*
         * Make sure the output directory exists.
         */
        function (callback) {
          fse.ensureDir (rcPath, callback);
        },

        /*
         * Open the connection to the database.
         */
        function (exists, callback) {
          let mongoConfig = blueprint.app.configs.mongodb;
          let connOptions = mongoConfig.connections[targetConnection];

          mongodb.getConnectionManager ().openConnection (targetConnection, connOptions, callback);
        },

        /*
         * Create each of the clients.
         */
        function (conn, callback) {
          let data = [
            {type: 'native', name: 'gatekeeper-cli', email: args.email, scope: DEFAULT_SCOPE}
          ];

          blueprint.app.models.Client.create (data, callback);
        },

        function (clients, callback) {
          async.each (clients, function (client, callback) {
            let data = {
              client_id: client.id,
              client_secret: client.client_secret
            };

            let filename = path.resolve (rcPath, client.name);
            fse.writeJSON (filename, data, {spaces: 2}, callback);
          }, callback);
        }
      ], callback);
    }
  ], callback);
}

function setupComplete (err) {
  if (err)
    throw err;

  winston.log ('info', 'setup complete!');
  process.exit (0);
}
