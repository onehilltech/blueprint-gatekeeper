{
  "name": "passport-control-client",
  "description": "Client library for using Passport Control",
  "version": "0.1.2",
  "private": true,
  "main": "./lib",
  "repository": {
    "type": "git",
    "url": "https://bitbucket.org/onehilltech/passport-control-client.git"
  },
  "dependencies": {
    "passport-control-common": "git+ssh://git@bitbucket.org:onehilltech/passport-control-common.git#v0.2.2",
    "passport-local": "1.0.x",
    "passport-http-bearer": "1.0.x"
  },
  "devDependencies": {
    "supertest": "0.12.x",
    "superagent": "0.18.x",
    "mocha": "1.x.x",
    "express": "4.3.x",
    "body-parser": "1.0.x",
    "morgan": "1.0.x",
    "passport": "0.2.x"
  },
  "scripts": {
    "test": "mocha --recursive --reporter spec"
  },
  "readme": "An authentication client and module for Express.js _application programming \ninterfaces (APIs)_. Mayipass implements the OAuth 2.0 protocol atop of MongoDB, \nand is designed to be deployed with any services that wants to expose an API \nfor clients to remotely communicate with their service over the Internet.\n\nOAuth 2.0 Resource Protection\n==============================\n\nYou can configure OAuth 2.0 to protect individual resources as follows:\n\n```\n// Load passport and mayipass modules.\nvar passport = require ('passport'),\n    passportControlClient = require ('passport-control-client');\n\n// Install the bearar authentication strategy.\npassport.use (passportControlClient.auth.bearer ());\n\n// Create a protected resource using Express\napp.get ('/protected/resource/uri', [\n  passport.authenticate ('bearer', {session: false}),\n  function (req, res) {\n    // req.authInfo is set using the `info` argument supplied by\n    // `BearerStrategy`. It is typically used to indicate scope of the token,\n    // and used in access control checks. For illustrative purposes, this\n    // example simply returns the scope in the response.\n    res.json ({ id: req.user._id, name: req.user.email, scope: req.authInfo.scope })\n  }\n]);\n```\n\nThis is good if you do not need to protect a large number of resources, or\nindividual resources are not located under the same base URI.\n\nIf you need to protect a set of resources that have the same base URI, then\nyou can use the following method to enable OAuth 2.0 protection:\n\n\n```\n// Load passport and mayipass modules.\nvar passport = require ('passport'),\n    passportControlClient = require ('passport-control-client');\n\n// Install the bearar authentication strategy.\npassport.use (passportControlClient.auth.bearer ());\n\n// Create a protected resource using Express\napp.use ('/baseuri', passport.authenticate ('bearer', {session: false}));\napp.get ('/baseuri/protected/resource', function (req, res) {\n    // req.authInfo is set using the `info` argument supplied by\n    // `BearerStrategy`. It is typically used to indicate scope of the token,\n    // and used in access control checks. For illustrative purposes, this\n    // example simply returns the scope in the response.\n    res.json ({ id: req.user._id, name: req.user.email, scope: req.authInfo.scope })\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "passport-control-client@0.1.2",
  "dist": {
    "shasum": "886b2ababd9df673e1d58e0750a0afacdc4c6a4e"
  },
  "_resolved": "git+ssh://git@bitbucket.org:onehilltech/passport-control-client.git#f49aa65a4d08184b032cbc3b891e07b2bdbbc821",
  "_from": "git+ssh://git@bitbucket.org:onehilltech/passport-control-client.git#v0.1.2"
}
